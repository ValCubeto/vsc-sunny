{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Sunny",
  "scopeName": "source.sny",
  "patterns": [
    {
      "include": "#sunny"
    }
  ],
  "repository": {
    "brackets": {
      "patterns": [
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "meta.brace.round.sny punctuation.brackets.round.sny"
            }
          },
          "patterns": [{ "include": "#sunny" }],
          "end": "\\)",
          "endCaptures": {
            "0": { "name": "meta.brace.round.sny punctuation.brackets.round.sny" }
          }
        },
        {
          "begin": "\\{",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.block.sny punctuation.brackets.curly.sny" }
          },
          "patterns": [{ "include": "#sunny" }],
          "end": "\\}",
          "endCaptures": {
            "0": { "name": "punctuation.definition.block.sny punctuation.brackets.curly.sny" }
          }
        },
        {
          "begin": "\\[",
          "beginCaptures": {
            "0": { "name": "punctuation.brackets.square.sny" }
          },
          "patterns": [{ "include": "#sunny" }],
          "end": "\\]",
          "endCaptures": {
            "0": { "name": "punctuation.brackets.square.sny" }
          }
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.sny",
          "begin": "//",
          "end": "\\n"
        },
        {
          "name": "comment.block.sny",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.sny",
          "match": "(?<![^.]\\.\\s*|\\w)(?:[0-9_]+(?:\\.[0-9_]+)?(?:[eE][-+]?[0-9_]+(?:\\.[0-9_]+)?)?|0b[01_]+|0x[0-9a-fA-F_]+)\\b",
          "comment": "1_2.5_0e+3_4.56 | 0b1000_0001 | 0x50_50"
        }
      ]
    },
    "stringEscapes": {
      "patterns": [
        {
          "name": "constant.other.character-class.sny constant.character.escape.sny",
          "match": "\\\\[nrtaeb]"
        },
        {
          "name": "constant.character.escape.sny",
          "match": "\\\\u\\{([0-9a-fA-F]{1,6})\\}",
          "captures": {
            "1": { "name": "constant.numeric.sny" }
          }
        },
        {
          "comment": "Any other escape sequence",
          "name": "constant.character.escape.sny",
          "match": "\\\\."
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.raw.sny",
          "begin": "\\b([rR])(\\$*)(\")",
          "beginCaptures": {
            "1": { "name": "string.raw.sny" },
            "2": { "name": "punctuation.definition.string.start.sny" },
            "3": { "name": "punctuation.definition.string.start.sny" }
          },
          "end": "(\"\\2)|(.)?$",
          "endCaptures": {
            "1": { "name": "punctuation.definition.string.end.sny" },
            "2": { "name": "invalid.sny" }
          }
        },
        {
          "name": "string.format.sny",
          "begin": "\\b([fF])(\\$*)(\")",
          "beginCaptures": {
            "1": { "name": "string.format.sny" },
            "2": { "name": "punctuation.definition.string.start.sny" },
            "3": { "name": "punctuation.definition.string.start.sny" }
          },
          "patterns": [
            { "include": "#stringEscapes" },
            {
              "name": "constant.other.character-class.sny constant.character.escape.sny",
              "match": "\\\\0"
            },
            {
              "contentName": "variable.sny",
              "begin": "\\{",
              "beginCaptures": {
                "0": { "name": "punctuation.definition.template-expression.begin.sny" }
              },
              "patterns": [{ "include": "#sunny" }],
              "end": "\\}",
              "endCaptures": {
                "0": { "name": "punctuation.definition.template-expression.end.sny" }
              }
            }
          ],
          "end": "(\"\\2)|(.)?$",
          "endCaptures": {
            "1": { "name": "punctuation.definition.string.end.sny" },
            "2": { "name": "invalid.sny" }
          }
        },
        {
          "name": "string.c.sny",
          "begin": "\\b([cC])(\\$*)(\")",
          "beginCaptures": {
            "1": { "name": "string.c.sny" },
            "2": { "name": "punctuation.definition.string.start.sny" },
            "3": { "name": "punctuation.definition.string.start.sny" }
          },
          "patterns": [
            {
              "name": "invalid.sunny",
              "match": "\\\\0|\\\\u\\{\\s*0\\s*}"
            },
            { "include": "#stringEscapes" }
          ],
          "end": "(\"\\2)|(.)$|$",
          "endCaptures": {
            "1": { "name": "punctuation.definition.string.end.sny" },
            "2": { "name": "invalid.sny" }
          }
        },
        {
          "name": "string.sny",
          "begin": "(\\$*)(\")",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.string.start.sny" },
            "1": { "name": "punctuation.definition.string.start.sny" }
          },
          "patterns": [
            { "include": "#stringEscapes" },
            {
              "name": "constant.other.character-class.sny constant.character.escape.sny",
              "match": "\\\\0"
            }
          ],
          "end": "(\"\\1)|(.)?$",
          "endCaptures": {
            "1": { "name": "punctuation.definition.string.end.sny" },
            "2": { "name": "invalid.sny" }
          }
        }
      ]
    },
    "meta": {
      "begin": "#\\[",
      "patterns": [
        {
          "begin": "(\\w+)\\s*\\(",
          "beginCaptures": {
            "1": { "name": "entity.name.function.decorator.sny" }
          },
          "end": "\\)"
        },
        {
          "name": "entity.name.function.decorator.sny",
          "match": "\\w+"
        }
      ],
      "end": "\\]"
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.rest.sny",
          "match": "\\.{3}"
        },
        {
          "name": "punctuation.accessor.sny keyword.operator.accessor.sny",
          "match": "\\.|::"
        },
        {
          "name": "keyword.operator.type.annotation.sny meta.type.annotation.sny",
          "match": ":"
        },
        {
          "name": "keyword.operator.sny",
          "match": "[<>]=|[=!]==",
          "comment": ">= <= == != === !=="
        },
        {
          "name": "keyword.operator.assignment.sny",
          "match": "(?:[-+/%^:]|[*|&]{1,2}|[<>]{2})?=",
          "comment": "= += -= /= *= %= **= ||= &&= &= |= ^= := >>= <<="
        },
        {
          "name": "keyword.operator.sny",
          "match": "[-+?*/|&^%!]|[<>]{1,2}",
          "comment": "- + * / | & ^ % < > << >> ! ?"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.other.import.sny",
          "match": "\\b(?:use)\\b"
        },
        {
          "name": "keyword.sny",
          "match": "\\b(?:takes|as|is|await|unsafe|arglist|async|defer|hidden|shared|where|if|else|match|return|impl|loop|while|break|continue|for|in|case)\\b"
        },
        {
          "name": "storage.type.sny",
          "match": "\\b(?:mod|bitset|struct|enum|interface|type|const|state|let|var|fun|class|macro)\\b"
        },
        {
          "name": "support.function.builtin.sny",
          "match": "\\b(?:e?println|panic)\\b"
        },
        {
          "name": "support.class.builtin.sny",
          "match": "\\b(?:Option|Result|Ordering|Self|Super|Bool|u?int(?:8|16|32|64)|float(?:32|64)|String|Map|Dict|List|Set|Range)\\b"
        },
        {
          "name": "constant.language.sny",
          "match": "\\b(?:std|_|self|Super|True|False|Ok|Err|Some|None|Less|Equal|Greater)\\b"
        }
      ]
    },
    "functions": {
      "comment": "todo!",
      "patterns": [
        {
          "name": "entity.name.function.sny",
          "match": "\\b\\w+!?(?=\\s*\\()",
          "comment": "abc()"
        }
      ]
    },
    "sunny": {
      "patterns": [
        { "include": "#comments" },
        { "include": "#strings" },
        { "include": "#brackets" },
        { "include": "#numbers" },
        { "include": "#operators" },
        { "include": "#meta" },
        { "include": "#keywords" },
        { "include": "#functions" }
      ]
    }
  }
}
